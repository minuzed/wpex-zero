<?php
/**
 * Main Customizer functions
 *
 * @package     WordPress Customizer Class
 * @author      Alexander Clarke
 * @copyright   Copyright (c) 2014, Symple Workz LLC
 * @link        http://www.wpexplorer.com
 * @version     1.0.0
 */

// Start Class
if ( ! class_exists( 'WPEX_Customizer' ) ) {
    class WPEX_Customizer {

        /**
         * Start things up
         *
         * @version 1.0.0
         */
        public function __construct() {

            // Loads customizer js file for postmessage transport method
            add_action( 'customize_preview_init', array( $this, 'preview_init' ) );

            // Adds CSS for customizer custom controls
            add_action( 'customize_controls_print_styles', array( $this, 'controls_print_styles' ) );

            // Register and unregister Customizer settings
            add_action( 'customize_register', array( $this, 'customize_register' ) );

            // After save hook
            add_action( 'customize_save_after', array( $this, 'save_after' ) );

            // Customizer directory paths
            $this->class_path           = '/inc/classes/customizer/';
            $this->class_path           = apply_filters( 'wpex_customizer_class_path',  $this->class_path );
            $this->customizer_dir       = get_template_directory() . $this->class_path;
            $this->customizer_dir_uri   = get_template_directory_uri() . $this->class_path;

            // Array of panels
            $this->panels = array();
            $this->panels = apply_filters( 'wpex_customizer_panels', $this->panels );

            // Array of Google Fonts to load
            $this->load_google_fonts_cache = get_theme_mod( 'wpex_load_google_fonts_cache', array() );

            // Get CSS Cache & Google fonts cache
            $this->inline_css_cache = get_theme_mod( 'wpex_inline_css_cache' );

            // If it's the customizer lets remove the css and google fonts cache
            if ( is_customize_preview() ) {
                $this->inline_css_cache = $this->load_google_fonts_cache = NULL;
            }

            // Hook into customizer save action to delete custom CSS cache
            add_action( 'customize_save_after', array( $this, 'delete_theme_mods' ) );

            // Hook into wp_head to output custom Google font scripts
            add_action( 'wp_head', array( $this, 'load_google_fonts' ) );

            // Hook into wp_head to output custom CSS generated by styling options
            add_action( 'wp_head', array( $this, 'output_css' ) );

            // Include Import/Export class
            require_once ( $this->customizer_dir .'import-export.php' );

        }

        /**
         * Loads customizer js file for postmessage transport method
         *
         * @link    http://codex.wordpress.org/Theme_Customization_API
         * @version 1.0.0
         */
        public function preview_init() {
            // Nothing yet...
        }

        /**
         * Adds CSS for customizer custom controls
         *
         * @link    http://codex.wordpress.org/Plugin_API/Action_Reference/customize_controls_print_styles
         * @version 1.0.0
         */
        public function controls_print_styles() {
            wp_enqueue_style(
                'wpex-customizer-style',
                $this->customizer_dir_uri . 'assets/customizer-style.css',
                '1.0'
            );
        }

        /**
         * Runs when customizer is saved
         *
         * @link    https://developer.wordpress.org/reference/hooks/customize_save_after/
         * @version 1.0.0
         */
        public function save_after() {
            // Nothing yet...
        }

        /**
         * Registers new controls
         * Adds new customizer panels, sections, settings & controls
         *
         * @link    http://codex.wordpress.org/Theme_Customization_API
         * @since   1.0.0
         */
        public function customize_register( $wp_customize ) {

            // Register only during customize preview
            if ( ! is_customize_preview() ) {
                return;
            }

            // Return if $this->panels var is empty
            if ( empty( $this->panels ) ) {
                return;
            }

            // Include custom controls
            require_once( $this->customizer_dir . 'controls.php' );

            // Register panels
            $panel_priority = 140; // add panels at the bottom

            // Loop through and add panels
            foreach( $this->panels as $panel_id => $panel ) {

                // Add prefix to panel id
                $panel_id = 'wpex_'. $panel_id;

                // Register panel
                $panel_priority++;
                $wp_customize->add_panel( $panel_id, array(
                    'priority'      => $panel_priority,
                    'capability'    => 'edit_theme_options',
                    'title'         => $panel['title'],
                ) );

                // Loop through panel sections and add sections
                $section_priority = 0;
                foreach( $panel['sections'] as $section ) {
                    $section_priority++;
                    $description = isset( $section['desc'] ) ? $section['desc'] : NULL;
                    $wp_customize->add_section( $section['id'], array(
                        'title'         => $section['title'],
                        'panel'         => $panel_id,
                        'priority'      => $section_priority,
                        'description'   => $description,
                    ) );

                    // Loop through section settings and add settings
                    $control_priority   = 0;
                    foreach ( $section['settings'] as $setting ) {

                        $control_priority++;

                        $id                 = isset( $setting['id'] ) ? $setting['id'] : '';
                        $transport          = isset( $setting['transport'] ) ? $setting['transport'] : 'refresh';
                        $default            = isset( $setting['default'] ) ? $setting['default'] : '';
                        $sanitize_callback  = isset( $setting['sanitize_callback'] ) ? $setting['sanitize_callback'] : false;
                        $control_label      = isset( $setting['control']['label'] ) ? $setting['control']['label'] : '';
                        $control_desc       = isset( $setting['control']['desc'] ) ? $setting['control']['desc'] : '';
                        $control_type       = isset( $setting['control']['type'] ) ? $setting['control']['type'] : 'text';
                        $control_choices    = isset( $setting['control']['choices'] ) ? $setting['control']['choices'] : array();

                        // If no ID continue
                        if ( ! $id ) {
                            continue;
                        }

                        // Control object
                        if ( isset( $setting['control']['object'] ) ) {
                            $control_object = $setting['control']['object'];
                        } elseif ( 'color' == $control_type ) {
                            $control_object = 'WP_Customize_Color_Control';
                        } elseif ( 'upload' == $control_type ) {
                            $control_object = 'WP_Customize_Image_Control';
                        } elseif ( 'sorter' == $control_type ) {
                            $control_object = 'WPEX_Customize_Control_Sorter';
                        } elseif ( 'google_font' == $control_type ) {
                            $control_object = 'WPEX_Fonts_Dropdown_Control';
                        } elseif ( 'ui-slider' == $control_type ) {
                            $control_object = 'WPEX_Customize_Sliderui_Control';
                        } else {
                            $control_object = false;
                        }

                        // Add setting and control
                        $wp_customize->add_setting( $id, array(
                            'type'              => 'theme_mod',
                            'transport'         => $transport,
                            'default'           => $default,
                            'sanitize_callback' => $sanitize_callback,
                        ) );

                        if ( $control_object ) {
                            $wp_customize->add_control( new $control_object ( $wp_customize, $id, array(
                                'label'         => $control_label,
                                'section'       => $section['id'],
                                'settings'      => $id,
                                'priority'      => $control_priority,
                                'description'   => $control_desc,
                                'type'          => $control_type,
                                'choices'       => $control_choices,
                            ) ) );
                        } else {
                            $wp_customize->add_control( $id, array(
                                'label'         => $control_label,
                                'section'       => $section['id'],
                                'settings'      => $id,
                                'priority'      => $control_priority,
                                'description'   => $control_desc,
                                'type'          => $control_type,
                                'choices'       => $control_choices,
                            ) );
                        }

                     } // End foreach $section['settings']

                } // End foreach $panel['sections']

            } // END foreach $this->panels

        }

        /**
         * Sanitize data
         *
         * @since 1.0.0
         */
        public function sanitize_data( $return, $data ) {

            // Hex Color
            if ( 'hex' == $return ) {
                if ( preg_match('|^#([A-Fa-f0-9]{3}){1,2}$|', $data ) ) {
                    $data = $data;
                }
            }

            // Pixel
            elseif ( 'px' == $return ) {
                 $data = intval( $data );
                 $data = $data .'px';
            }

            // Return sanitized data
            return $data;

        }
        

        /**
         * Generates inline CSS for styling options
         *
         * @since 1.0.0
         */
        public function loop_through_inline_css( $return = 'css' ) {

            // Define vars
            $inline_css     = '';
            $google_fonts   = array();

            // Return if cache exists we don't need to do anything
            if ( $this->inline_css_cache ) {
                return;
            }

            // Get customizer panels
            $panels = $this->panels;

            // Return if there aren't any panels
            if ( empty( $panels ) ) {
                return;
            }

            // Pluck out all settings to loop through them
            $sections = wp_list_pluck( $panels, 'sections' );

            // Return if there aren't any settings
            if ( empty( $sections ) ) {
                return;
            }

            // Loop through settings
            foreach ( $sections as $section ) {

                // Pluck out settings
                $settings = wp_list_pluck( $section, 'settings' );

                // Loop through settings and find inline_css
                foreach ( $settings as $settings_array ) {

                    // Loop through individual settings
                    foreach ( $settings_array as $setting ) {

                        // If setting shouldn't output css continue on to the next
                        if ( ! isset( $setting['inline_css'] ) ) {
                            continue;
                        }

                        // Get setting ID and if empty continue onto the next setting
                        $id = isset( $setting['id'] ) ? $setting['id'] : '';

                        if ( ! $id ) {
                            continue;
                        }

                        // Check if there is a default value
                        $default = isset ( $setting['default'] ) ? $setting['default'] : false;

                        // Get theme mod value and if empty continue onto the next setting
                        $theme_mod  = get_theme_mod( $id, $default );

                        if ( ! $theme_mod ) {
                            continue;
                        }

                        // Extract vars
                        extract( $setting['inline_css'] );

                        // Make sure vars are defined
                        $sanitize   = isset( $sanitize ) ? $sanitize : '';
                        $target     = isset( $target ) ? $target : '';
                        $alter      = isset( $alter ) ? $alter : '';

                        // Add important tag if set to true
                        if ( isset( $setting['inline_css']['important'] ) ) {
                            $important = ' !important';
                        } else {
                            $important = false;
                        }

                        // Target and alter vars are required, if they are empty continue onto the next setting
                        if ( ! $target && ! $alter ) {
                            continue;
                        }

                        // Sanitize data
                        if ( $sanitize ) {
                            $theme_mod = $this->sanitize_data( $sanitize, $theme_mod );
                        }

                        // Save inline_css
                        if ( $theme_mod ) {
                            $inline_css .= $target .'{ '. $alter .':'. $theme_mod . $important .'; }';
                        }

                        // If we are altering a font-family and it's not a standard font add the font to the list of Google fonts to load
                        if ( 'font-family' == $alter && ! in_array( $theme_mod, $this->std_fonts_array() ) ) {
                            $google_fonts[] = $theme_mod;
                        }

                    }

                }

            }

            if ( $inline_css && 'css' == $return ) {
                return $inline_css;
            }

            if ( $google_fonts && 'google_fonts' == $return ) {
                return $google_fonts;
            }

        }

        /**
         * Delete CSS cache in the Customizer so we can generate the settings
         *
         * @since 1.0.0
         */
        public function delete_theme_mods() {
            remove_theme_mod( 'wpex_inline_css_cache' );
            remove_theme_mod( 'wpex_load_google_fonts_cache' );
        }

        /**
         * Returns correct CSS to output to wp_head
         *
         * @since 1.0.0
         */
        public function inline_css_to_output() {

            // Get CSS from the Cache
            if ( $this->inline_css_cache ) {
                $inline_css = $this->inline_css_cache;
            }

            // Get CSS from loop
            else {

                $inline_css = $this->loop_through_inline_css( 'css' );

                // Cache inline CSS if not in Customizer
                if ( ! is_customize_preview() ) {

                    // If empty save as empty to prevent function from-running again
                    if ( ! $inline_css ) {
                       $inline_css = 'empty';
                    }

                    // Save inline css as theme_mod
                    set_theme_mod( 'wpex_inline_css_cache', $inline_css );

                }

            }

            // Return CSS
            if ( $inline_css ) {
                return $inline_css;
            }

        }

        /**
         * Minify CSS
         *
         * @since 1.0.0
         */
        public function minify_css( $css ) {

            // Normalize whitespace
            $css = preg_replace( '/\s+/', ' ', $css );

            // Remove ; before }
            $css = preg_replace( '/;(?=\s*})/', '', $css );

            // Remove space after , : ; { } */ >
            $css = preg_replace( '/(,|:|;|\{|}|\*\/|>) /', '$1', $css );

            // Remove space before , ; { }
            $css = preg_replace( '/ (,|;|\{|})/', '$1', $css );

            // Strips leading 0 on decimal values (converts 0.5px into .5px)
            $css = preg_replace( '/(:| )0\.([0-9]+)(%|em|ex|px|in|cm|mm|pt|pc)/i', '${1}.${2}${3}', $css );

            // Strips units if value is 0 (converts 0px to 0)
            $css = preg_replace( '/(:| )(\.?)0(%|em|ex|px|in|cm|mm|pt|pc)/i', '${1}0', $css );

            // Return minified CSS
            return trim( $css );

        }

        /**
         * Outputs CSS to the wp_head
         *
         * @since 1.0.0
         */
        public function output_css() {

            // Get CSS
            $css = $this->inline_css_to_output();
            
            // Output the Custom CSS
            if ( $css && 'empty' != $css ) {
                $css = $this->minify_css( $css );
                $css = '<!-- Theme Customizer Styling --><style type="text/css">' . $css . '</style>';
                echo $css;
            }

        }

        /**
         * List of standard fonts used in the Fonts control
         *
         * @since 1.0.0
         */
        public function std_fonts_array() {

            // Array of Standard fonts
            $fonts = array(
                "Arial, Helvetica, sans-serif",
                "Arial Black, Gadget, sans-serif",
                "Bookman Old Style, serif",
                "Comic Sans MS, cursive",
                "Courier, monospace",
                "Garamond, serif",
                "Georgia, serif",
                "Impact, Charcoal, sans-serif",
                "Lucida Console, Monaco, monospace",
                "Lucida Sans Unicode, Lucida Grande, sans-serif",
                "MS Sans Serif, Geneva, sans-serif",
                "MS Serif, New York, sans-serif",
                "Palatino Linotype, 'Book Antiqua, Palatino, serif",
                "Tahoma, Geneva, sans-serif",
                "Times New Roman, Times, serif",
                "Trebuchet MS, Helvetica, sans-serif",
                "Verdana, Geneva, sans-serif",
                "Garamond, serif",
                "Bookman Old Style",
                "Verdana",
                "Comic Sans",
                "Courier, monospace",
                "Comic Sans MS",
                "Courier",
                "Georgia",
                "Paratina Linotype",
                "Trebuchet MS",
            );
            return $fonts;
        }

        /**
         * Returns google fonts to load
         *
         * @since 1.0.0
         */
        public function google_fonts_to_load() {

            // Get Google Fonts from the Cache
            if ( $this->load_google_fonts_cache ) {
                $load_fonts = $this->load_google_fonts_cache;
            }

            // Get Google fonts list from loop
            else {

                $load_fonts = $this->loop_through_inline_css( 'google_fonts' );

                // Cache Google Fonts list if not in Customizer
                if ( ! is_customize_preview() ) {

                    // If empty save as empty to prevent function from-running again
                    if ( ! $load_fonts ) {
                       $load_fonts = 'none';
                    }

                    // Save google fonts list in a theme mode for use later
                    set_theme_mod( 'wpex_load_google_fonts_cache', $load_fonts );

                }

            }

            // Return CSS
            if ( $load_fonts ) {
                return $load_fonts;
            }

        }

        /**
         * Load Google Fonts
         *
         * @since 1.0.0
         */
        public function load_google_fonts() {

            // Get list of Google fonts to add and cache them
            $load_fonts = $this->google_fonts_to_load();

            // Add Google fonts code to the head
            if ( ! empty( $load_fonts ) && 'none' != $load_fonts ) {
                foreach ( $load_fonts as $font ) {
                    $script_url = 'https://fonts.googleapis.com/css?family='.str_replace(' ', '%20', $font ) .'';
                    echo '<link href="'. $script_url .':300italic,400italic,600italic,700italic,800italic,400,300,600,700,800&amp;subset=latin,cyrillic-ext,greek-ext,greek,vietnamese,latin-ext,cyrillic" rel="stylesheet" type="text/css">';
                }
            }

        }

    }
}
$wpex_customizer = new WPEX_Customizer;